/*
       Licensed to the Apache Software Foundation (ASF) under one
       or more contributor license agreements.  See the NOTICE file
       distributed with this work for additional information
       regarding copyright ownership.  The ASF licenses this file
       to you under the Apache License, Version 2.0 (the
       "License"); you may not use this file except in compliance
       with the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing,
       software distributed under the License is distributed on an
       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
       KIND, either express or implied.  See the License for the
       specific language governing permissions and limitations
       under the License.
*/

// GENERATED FILE! DO NOT EDIT!

//apply plugin: 'android'
apply plugin: 'com.android.application'
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'android-native-dependencies'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'  // To use ButterKnife
    }

    // Switch the Android Gradle plugin version requirement depending on the
    // installed version of Gradle. This dependency is documented at
    // http://tools.android.com/tech-docs/new-build-system/version-compatibility
    // and https://issues.apache.org/jira/browse/CB-8143
//    if (gradle.gradleVersion >= "2.2") {
//        dependencies {
//            classpath 'com.android.tools.build:gradle:1.3.0'
//            classpath 'com.nabilhachicha:android-native-dependencies:0.1+'
//            classpath 'com.google.gms:google-services:1.3.0-beta1'
//        }
//    } else if (gradle.gradleVersion >= "2.1") {
//        dependencies {
//            classpath 'com.android.tools.build:gradle:1.2.0+'
//            classpath 'com.nabilhachicha:android-native-dependencies:0.1+'
//            classpath 'com.google.gms:google-services:1.3.0-beta1'
//        }
//    } else {
//        dependencies {
//            classpath 'com.android.tools.build:gradle:1.3.0'
//            classpath 'com.nabilhachicha:android-native-dependencies:0.1+'
//            classpath 'com.google.gms:google-services:1.3.0-beta1'
//        }
//    }
}

// Allow plugins to declare Maven dependencies via build-extras.gradle.
repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'http://clojars.org/repo'
    }
    flatDir {
        dirs 'libs'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

// Configuration properties. Set these via environment variables, build-extras.gradle, or gradle.properties.
// Refer to: http://www.gradle.org/docs/current/userguide/tutorial_this_and_that.html
ext {
    apply from: 'CordovaLib/cordova.gradle'
    // The value for android.compileSdkVersion.
    if (!project.hasProperty('cdvCompileSdkVersion')) {
        cdvCompileSdkVersion = null;
    }
    // The value for android.buildToolsVersion.
    if (!project.hasProperty('cdvBuildToolsVersion')) {
        cdvBuildToolsVersion = null;
    }
    // Sets the versionCode to the given value.
    if (!project.hasProperty('cdvVersionCode')) {
        cdvVersionCode = null
    }
    // Sets the minSdkVersion to the given value.
    if (!project.hasProperty('cdvMinSdkVersion')) {
        cdvMinSdkVersion = null
    }
    // Whether to build architecture-specific APKs.
    if (!project.hasProperty('cdvBuildMultipleApks')) {
        cdvBuildMultipleApks = null
    }
    // .properties files to use for release signing.
    if (!project.hasProperty('cdvReleaseSigningPropertiesFile')) {
        cdvReleaseSigningPropertiesFile = null
    }
    // .properties files to use for debug signing.
    if (!project.hasProperty('cdvDebugSigningPropertiesFile')) {
        cdvDebugSigningPropertiesFile = null
    }
    // Set by build.js script.
    if (!project.hasProperty('cdvBuildArch')) {
        cdvBuildArch = null
    }

    // Plugin gradle extensions can append to this to have code run at the end.
    cdvPluginPostBuildExtras = []
}

// PLUGIN GRADLE EXTENSIONS START
// PLUGIN GRADLE EXTENSIONS END

def hasBuildExtras = file('build-extras.gradle').exists()
if (hasBuildExtras) {
    apply from: 'build-extras.gradle'
}

// Set property defaults after extension .gradle files.
if (ext.cdvCompileSdkVersion == null) {
    ext.cdvCompileSdkVersion = privateHelpers.getProjectTarget()
}
if (ext.cdvBuildToolsVersion == null) {
    ext.cdvBuildToolsVersion = privateHelpers.findLatestInstalledBuildTools()
}
if (ext.cdvDebugSigningPropertiesFile == null && file('debug-signing.properties').exists()) {
    ext.cdvDebugSigningPropertiesFile = 'debug-signing.properties'
}
if (ext.cdvReleaseSigningPropertiesFile == null && file('release-signing.properties').exists()) {
    ext.cdvReleaseSigningPropertiesFile = 'release-signing.properties'
}

// Cast to appropriate types.
ext.cdvBuildMultipleApks = cdvBuildMultipleApks == null ? false : cdvBuildMultipleApks.toBoolean();
ext.cdvMinSdkVersion = cdvMinSdkVersion == null ? null : Integer.parseInt('' + cdvMinSdkVersion)
ext.cdvVersionCode = cdvVersionCode == null ? null : Integer.parseInt('' + cdvVersionCode)

def computeBuildTargetName(debugBuild) {
    def ret = 'assemble'
    if (cdvBuildMultipleApks && cdvBuildArch) {
        def arch = cdvBuildArch == 'arm' ? 'armv7' : cdvBuildArch
        ret += '' + arch.toUpperCase().charAt(0) + arch.substring(1);
    }
    return ret + (debugBuild ? 'Debug' : 'Release')
}

// Make cdvBuild a task that depends on the debug/arch-sepecific task.
task cdvBuildDebug
cdvBuildDebug.dependsOn {
//    return computeBuildTargetName(true)
}

task cdvBuildRelease
cdvBuildRelease.dependsOn {
//    return computeBuildTargetName(false)
}

task cdvPrintProps << {
    println('cdvCompileSdkVersion=' + cdvCompileSdkVersion)
    println('cdvBuildToolsVersion=' + cdvBuildToolsVersion)
    println('cdvVersionCode=' + cdvVersionCode)
    println('cdvMinSdkVersion=' + cdvMinSdkVersion)
    println('cdvBuildMultipleApks=' + cdvBuildMultipleApks)
    println('cdvReleaseSigningPropertiesFile=' + cdvReleaseSigningPropertiesFile)
    println('cdvDebugSigningPropertiesFile=' + cdvDebugSigningPropertiesFile)
    println('cdvBuildArch=' + cdvBuildArch)
    println('computedVersionCode=' + android.defaultConfig.versionCode)
    android.productFlavors.each { flavor ->
        println('computed' + flavor.name.capitalize() + 'VersionCode=' + flavor.versionCode)
    }
}

android {

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            //jniLibs.srcDirs = ['jniLibs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        debug {
            keyAlias 'wenote'
            keyPassword 'wescan@10!'
            storeFile file('./signature/DebugKey.wescan')
            storePassword 'wescan@10!'
        }

        release {
            keyAlias 'wescan'
            keyPassword 'wescaneoqkr'
            storeFile file('./signature/AndroidKey.wescan')
            storePassword 'wescan'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
//            resValue "string", "facebook_app_id", "1241095575920042"  // Debug 버전 Facebook AppId
            debuggable true  // debugging 허용 여부
        }
        release {
            signingConfig signingConfigs.release
            debuggable false  // debugging 허용 여부

//            resValue "string", "facebook_app_id", "257864911219123"   // Release 버전 Facebook AppId
//            jniDebuggable false
//            renderscriptDebuggable false
//            zipAlignEnabled true  // apk 최적화

//            minifyEnabled true   // proguard (난독화) 활성화
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    buildToolsVersion cdvBuildToolsVersion
//    useLibrary 'org.apache.http.legacy'

    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "com.knowlounge"     // 배포용
//        applicationId "com.knowlounge.dev"   // 개발용
//        applicationId "com.knowlounge.iabtest"  // 인앱 결제 테스트용

        minSdkVersion 19
        targetSdkVersion 25
        //versionCode 24
        versionCode 149  // 알파 테스트용
        versionName "1.1.26"
        multiDexEnabled true

        /*
        if (cdvMinSdkVersion != null) {
            minSdkVersion cdvMinSdkVersion
        }*/

        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

    }

    // 빌드할때 힙사이즈 늘려주는 옵션
    dexOptions {
        preDexLibraries = false
        //incremental true
        javaMaxHeapSize "4g"
    }


    /*
    if (Boolean.valueOf(cdvBuildMultipleApks)) {
        productFlavors {
            armv7 {
                versionCode cdvVersionCode ?: defaultConfig.versionCode + 2
                ndk {
                    abiFilters "armeabi-v7a", ""
                }
            }
            x86 {
                versionCode cdvVersionCode ?: defaultConfig.versionCode + 4
                ndk {
                    abiFilters "x86", ""
                }
            }
            all {
                ndk {
                    abiFilters "all", ""
                }
            }
        }
    } else if (!cdvVersionCode) {
        def minSdkVersion = cdvMinSdkVersion ?: privateHelpers.extractIntFromManifest("minSdkVersion")
        // Vary versionCode by the two most common API levels:
        // 14 is ICS, which is the lowest API level for many apps.
        // 20 is Lollipop, which is the lowest API level for the updatable system webview.
        if (minSdkVersion >= 20) {
            defaultConfig.versionCode += 9
        } else if (minSdkVersion >= 14) {
            defaultConfig.versionCode += 8
        }
    }*/

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

//    if (cdvReleaseSigningPropertiesFile) {
//        signingConfigs {
//            release {
//                // These must be set or Gradle will complain (even if they are overridden).
//                keyAlias = ""
//                keyPassword = "__unset"
//                // And these must be set to non-empty in order to have the signing step added to the task graph.
//                storeFile = null
//                storePassword = "__unset"
//            }
//        }
//        buildTypes {
//            release {
//
//                signingConfig signingConfigs.release
//            }
//        }
//        addSigningProps(cdvReleaseSigningPropertiesFile, signingConfigs.release)
//    }
//    if (cdvDebugSigningPropertiesFile) {
//        addSigningProps(cdvDebugSigningPropertiesFile, signingConfigs.debug)
//    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/LICENSE'
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    // SUB-PROJECT DEPENDENCIES START
    debugCompile project(path: "CordovaLib", configuration: "debug")
    releaseCompile project(path: "CordovaLib", configuration: "release")


    compile 'com.wescan.alo.rtc:alortc-sdk:1.2.3@aar'

    /**
     * Android Support Library
     */
    //compile 'com.android.support:support-v13:25.2.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:percent:25.2.0'
    compile 'com.android.support:cardview-v7:25.2.0'
    compile 'com.android.support:recyclerview-v7:25.2.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.android.support:support-annotations:25.2.0'

    /**
     * Google Play Service Library
     */
    compile 'com.google.android.gms:play-services-gcm:10.2.0'   // Google Play Service GCM SDK
    compile 'com.google.android.gms:play-services-plus:10.2.0'  // Google Plus SDK
    compile 'com.google.android.gms:play-services-auth:10.2.0'  // Google Play Service Auth SDK
    compile 'com.google.android.gms:play-services-analytics:10.2.0' //Google Play Analytics SDK
    //compile 'com.google.android.gms:play-services:10.2.0'

    //compile 'com.google.apis:google-api-services-youtube:v3-rev178-1.22.0'


    /**
     * Text & Character processing Library
     */
    compile 'com.vdurmont:emoji-java:2.0.1'   // Emoji 제거


    /**
     * Util Library
     */
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.google.code.gson:gson:2.5'

    /**
     * Networking Library
     */
    compile 'io.reactivex:rxjava:1.2.2'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.loopj.android:android-async-http:1.4.9'  // Rest API 용 라이브러리
    compile 'org.java-websocket:java-websocket:1.3.1'   // WebSocket Library


    /**
     * Image processing Library
     */
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.squareup.picasso:picasso:2.5.2'   // Image Load 라이브러리


    /**
     * SDK
     */
    compile 'com.facebook.android:facebook-android-sdk:4.20.0' // Facebook SDK
    compile 'com.dropbox.core:dropbox-core-sdk:2.0.1'          // DropBox SDK

    /**
     * UI processing Library
     */
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'   // ButterKnife
    compile 'com.jakewharton:butterknife:8.5.1'        // ButterKnife
    compile 'me.grantland:autofittextview:0.2.+'              // https://github.com/grantland/android-autofittextview
    compile 'com.rengwuxian.materialedittext:library:2.1.4'   // https://github.com/rengwuxian/MaterialEditText
    compile 'com.getbase:floatingactionbutton:1.10.1'
    compile 'com.github.traex.rippleeffect:library:1.3'   // 버튼 터치시 ripple 효과 주는 라이브러리  (https://github.com/traex/RippleEffect)
    compile ('com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:0.9.3@aar'){transitive = true}
    compile 'io.github.luizgrp.sectionedrecyclerviewadapter:sectionedrecyclerviewadapter:1.0.4'   //section Recyclerview Adapter
    compile 'com.wang.avi:library:2.1.3'
    compile 'com.github.yukuku:ambilwarna:2.0.1'   // ColorPicker 라이브러리
    compile 'com.victor:lib:1.0.4'  // For loader test..


    /**
     * Debugging Library
     */
    // Facebook Stetho (debugging tool)
    compile 'com.facebook.stetho:stetho:1.4.2'
    compile 'com.facebook.stetho:stetho-okhttp3:1.4.2'

    /**
     * Dagger2 Library
     */
    annotationProcessor 'com.google.dagger:dagger-compiler:2.9'
    compile 'com.google.dagger:dagger:2.9'
    provided 'javax.annotation:jsr250-api:1.0'

    compile 'com.jakewharton.timber:timber:4.5.1'



}

//def promptForReleaseKeyPassword() {
//    if (!cdvReleaseSigningPropertiesFile) {
//        return;
//    }
//    if ('__unset'.equals(android.signingConfigs.release.storePassword)) {
//        android.signingConfigs.release.storePassword = privateHelpers.promptForPassword('Enter key store password: ')
//    }
//    if ('__unset'.equals(android.signingConfigs.release.keyPassword)) {
//        android.signingConfigs.release.keyPassword = privateHelpers.promptForPassword('Enter key password: ');
//    }
//}

//gradle.taskGraph.whenReady { taskGraph ->
//    taskGraph.getAllTasks().each() { task ->
//        if (task.name == 'validateReleaseSigning') {
//            promptForReleaseKeyPassword()
//        }
//    }
//}


def addSigningProps(propsFilePath, signingConfig) {
    def propsFile = file(propsFilePath)
    def props = new Properties()
    propsFile.withReader { reader ->
        props.load(reader)
    }

    def storeFile = new File(props.get('key.store') ?: privateHelpers.ensureValueExists(propsFilePath, props, 'storeFile'))
    if (!storeFile.isAbsolute()) {
        storeFile = RelativePath.parse(true, storeFile.toString()).getFile(propsFile.getParentFile())
    }
    if (!storeFile.exists()) {
        throw new FileNotFoundException('Keystore file does not exist: ' + storeFile.getAbsolutePath())
    }
    signingConfig.keyAlias = props.get('key.alias') ?: privateHelpers.ensureValueExists(propsFilePath, props, 'keyAlias')
    signingConfig.keyPassword = props.get('keyPassword', props.get('key.alias.password', signingConfig.keyPassword))
    signingConfig.storeFile = storeFile
    signingConfig.storePassword = props.get('storePassword', props.get('key.store.password', signingConfig.storePassword))
    def storeType = props.get('storeType', props.get('key.store.type', ''))
    if (!storeType) {
        def filename = storeFile.getName().toLowerCase();
        if (filename.endsWith('.p12') || filename.endsWith('.pfx')) {
            storeType = 'pkcs12'
        } else {
            storeType = signingConfig.storeType // "jks"
        }
    }
    signingConfig.storeType = storeType
}
for (def func : cdvPluginPostBuildExtras) {
    func()
}

// This can be defined within build-extras.gradle as:
//     ext.postBuildExtras = { ... code here ... }
if (hasProperty('postBuildExtras')) {
    postBuildExtras()
}

apply plugin: 'com.google.gms.google-services'